// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  driver
  user
}

enum Status {
  pending
  success
  failed
}

enum TransactionStatus {
  done
  pending
}

enum PaymentStatus {
  pending
  success
  failed
}

enum RuteType {
  berangkat
  balik
}

model Users {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(191)
  email       String        @unique @db.VarChar(191)
  no_hp       String        @unique
  password    String
  photo_url   String?
  lat         String?
  long        String?
  is_new      Boolean       @default(true)
  role        Role          @default(user)
  balance     Int           @default(0)
  created_at  DateTime      @default(now())
  updated_at  DateTime      @default(now())
  payment     Payment[]
  transaction Transaction[]
  angkot      Angkot[]
  rating      Rating[]
  Favorite    Favorite[]

  @@map("user")
}

model Payment {
  id         String        @id @default(uuid())
  user_id    Int
  amount     Int
  snap_token String        @unique
  status     PaymentStatus @default(pending)
  user       Users         @relation(fields: [user_id], references: [id])
  created_at DateTime      @default(now())
  updated_at DateTime      @default(now())

  @@map("payment")
}

model Transaction {
  id         Int               @id @default(autoincrement())
  user_id    Int
  angkot_id  Int
  tujuan_id  Int
  asal_id    Int
  status     TransactionStatus @default(pending)
  tanggal    DateTime          @default(now())
  price      Int
  user       Users             @relation(fields: [user_id], references: [id])
  angkot     Angkot            @relation(fields: [angkot_id], references: [id])
  created_at DateTime          @default(now())
  updated_at DateTime          @default(now())

  @@map("transaction")
}

model Angkot {
  id          Int           @id @default(autoincrement())
  name        String
  id_sopir    Int
  kuota       Int
  image       String
  sopir       Users         @relation(fields: [id_sopir], references: [id])
  transaction Transaction[]
  rute        Rute[]
  fasilitas   Fasilitas[]
  rating      Rating[]
  Favorite    Favorite[]

  @@map("angkot")
}

model Fasilitas {
  id        Int    @id @default(autoincrement())
  id_angkot Int
  name      String
  icon      String
  angkot    Angkot @relation(fields: [id_angkot], references: [id])

  @@map("fasilitas")
}

model Rating {
  id               Int    @id @default(autoincrement())
  user_id          Int
  angkot_id        Int
  rating_pelayanan Int
  rating_fasilitas Int
  komentar         String
  angkot           Angkot @relation(fields: [angkot_id], references: [id])
  users            Users  @relation(fields: [user_id], references: [id])

  @@map("rating")
}

model Rute {
  id        Int      @id @default(autoincrement())
  id_angkot Int
  alamat    String
  lat       String
  long      String
  jam_tiba  String
  tipe      RuteType
  angkot    Angkot   @relation(fields: [id_angkot], references: [id])

  @@map("rute")
}

model Chat {
  id             Int      @id @default(autoincrement())
  transaction_id Int
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now())

  @@map("chat")
}

model ChatDetail {
  id          Int      @id @default(autoincrement())
  chat_id     Int
  sender_id   Int
  receiver_id Int
  message     String
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  @@map("chat_detail")
}

model Favorite {
  id        Int    @id @default(autoincrement())
  user_id   Int
  angkot_id Int
  user      Users  @relation(fields: [user_id], references: [id])
  angkot    Angkot @relation(fields: [angkot_id], references: [id])

  @@map("favorite")
}
